package htsbox

import htsjdk.samtools.BAMRecord
import htsjdk.samtools.SAMFileHeader
import htsjdk.samtools.SAMFileWriter
import htsjdk.samtools.SAMFileWriterFactory

/*
 * This Groovy source file was auto generated by running 'gradle buildInit --type groovy-library'
 * by 'devsci5' at '10/25/16 12:46 AM' with Gradle 3.1
 *
 * @author devsci5, @date 10/25/16 12:46 AM
 */
class AlignmentLibrary {


    // input
    def combineContigs(File outputFile,File htsboxFile,File... bamFiles){

        SAMFileHeader fileHeader = new SAMFileHeader()
        fileHeader.addComment("combined bam file")
        final SAMFileWriter outputSam = new SAMFileWriterFactory().makeBAMWriter(fileHeader, true, outputFile);

        PairwiseAlignmentSet pairwiseAlignmentSet = parseAlignmentsVersion(htsboxFile)

        // write a single BAM reader / writer for each
        pairwiseAlignmentSet.entries.each {
//            SAMFileHeader = new SAMFileHeader()
//            BAMRecord bamRecord = new BAMRecord(
//                    fileHeader,
//                    referenceId,
//                    coordinate,
//                    readNameLength
//                    ,it.mapQ
//                    ,indexingBin
//                    ,cigarLength
//                    ,flags
//                    ,it.rLen
//                    ,mateReferenceId
//                    ,mateCoordinate
//                    ,insertSize
//                    ,null
//            )
            outputSam.
        }



        // read in each bam file between versions
//        for(File bamFile in bamFiles){
//            SAMFileHeader header = new SAMFileHeader()
////            BAMRecord bamRecord = new BAMRecord(
////                    header
////            )
////            BAMFileReader inputBamReader = new BAMFileReader(bamFile);
////            final SAMFileReader inputSam = new SAMFileReader(bamFile);
////            mReader = new BAMFileReader(bufferedStream, indexFile, eagerDecode, useAsyncIO, validationStringency, this.samRecordFactory);
//        }

        // output "combined / optimal version between each file", don't worry about overlap

    }

    //
    PairwiseAlignmentSet parseAlignmentsVersion(File file) {

        PairwiseAlignmentSet htsBoxSet = new PairwiseAlignmentSet()
        file.splitEachLine("\t"){ line ->
//            println "line: ${line}"
            PairwiseEntry entry = new PairwiseEntry()
            htsBoxSet.addEntry(entry)
        }
        return htsBoxSet

    }
}
